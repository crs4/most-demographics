# -*- coding: utf-8 -*-
from django.test import TestCase
from django.test.client import RequestFactory
from demographics.models import Patient, City
import json
from demographics.views import patient
from datetime import date


"""Class Patient

    Attributes:
        uid                     (django.db.models.CharField)                    : autogenerated unique identification number
        account_number          (django.db.models.CharField)                    : patient national identification number
        first_name              (django.db.models.CharField)                    : patient first name
        last_name               (django.db.models.CharField)                    : patient last name
        other_ids               (django.db.models.ManyToManyField :: Identifier): patient alternative identifiers, other than account_number
        gender                  (django.db.models.CharField)                    : patient gender
        birth_date              (django.db.models.DateField)                    : patient birth date
        birth_place             (django.db.models.ForeignKey :: City)           : patient birth city
        address                 (django.db.models.CharField)                    : patient address
        city                    (django.db.models.ForeignKey :: City)           : patient city address
        phone                   (django.db.models.CharField)                    : patient phone number
        mobile                  (django.db.models.CharField)                    : patient mobile phone number
        email                   (django.db.models.EmailField)                   : patient email
        certified_email         (django.db.models.EmailField)                   : patient certified email
        creation_timestamp      (django.db.models.DateTimeField)                : patient creation timestamp
        last_modified_timestamp (django.db.models.DateTimeField)                : patient last modification timestamp
        deactivation_timestamp  (django.db.models.DateTimeField)                : patient deactivation timestamp
        active                  (django.db.models.BooleanField)                 : patient state

    TODO: define an abstract class <Person> and specialise it with <Patient>
"""

SAMPLE_PATIENTS = [{
    'account_number': 'RSSMRA80H51B354M',
    'first_name': 'maria',
    'last_name': 'rossi',
    'gender': 'F',
    'birth_date': '1980-06-11',
    'birth_place': {
        'name': 'Cagliari',
        'province': 'CA',
        'state': 'Italia',
        'code': '09100'
    },
    'address': 'via Cavalcanti 31',
    'city': {
        'name': 'Selargius',
        'province': 'CA',
        'state': 'Italia',
        'code': '09047'
    },
    'other_ids': None,
    'phone': '070540373',
    'mobile': '3491534538',
    'email': 'test1@gmail.com',
    'certified_email': 'test1@postacertificata.gov.it'
}, {
    'account_number': 'BNCMRO80H51B354M',
    'first_name': 'mario',
    'last_name': 'bianchi',
    'gender': 'M',
    'birth_date': '1980-06-11',
    'birth_place': {
        'name': 'Cagliari',
        'province': 'CA',
        'state': 'Italia',
        'code': '09100'
    },
    'address': 'via Muravera 4',
    'city': {
        'name': 'Sestu',
        'province': 'CA',
        'state': 'Italia',
        'code': '09028'
    },
    'other_ids': None,
    'phone': '070540373',
    'mobile': '3491534538',
    'email': 'test2@gmail.com',
    'certified_email': 'test2@postacertificata.gov.it'
}]


class PatientTest(TestCase):
    def setUp(self):
        # Every test needs access to the request factory.
        self.factory = RequestFactory()
        self.patient_dictionary = SAMPLE_PATIENTS[0].copy()
        birth_place_dictionary = self.patient_dictionary.pop('birth_place')
        city_dictionary = self.patient_dictionary.pop('city')
        self.birth_place, birth_place_created = City.objects.get_or_create(**birth_place_dictionary)
        self.city, city_created = City.objects.get_or_create(**city_dictionary)

    def test_new(self):
        patient_data = self.patient_dictionary.copy()
        patient_data['birth_place'] = self.birth_place.pk
        patient_data['city'] = self.city.pk
        request = self.factory.post('/patient/new/', json.dumps(patient_data), content_type='json',
                                    HTTP_X_REQUESTED_WITH='XMLHttpRequest')
        response = patient.new(request)
        print response
        self.assertEqual(response.status_code, 200)

    def test_get_false(self):
        query_string = 'test'
        request = self.factory.get('/patient/get/', {'query_string': query_string})
        response = patient.get(request)
        print response
        self.assertEqual(response.status_code, 200)

    def test_get_true(self):
        query_string = 'ROS'
        request = self.factory.get('/patient/get/', {'query_string': query_string})
        response = patient.get(request)
        print response
        self.assertEqual(response.status_code, 200)